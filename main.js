!function(){"use strict";class e{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_setEventListeners(){this._inputElements=[...this._form.querySelectorAll(this._inputSelector)],this.submitBtn=this._form.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._errorClass),t.textContent=e.validationMessage}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._errorClass),e.classList.remove(this._inputErrorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_isFormValid(){return this._inputElements.every((e=>e.validity.valid))}_toggleButtonState(){this._isFormValid()?(this.submitBtn.classList.remove(this._inactiveButtonClass),this.submitBtn.disabled=!1):(this.submitBtn.classList.add(this._inactiveButtonClass),this.submitBtn.disabled=!0)}enableValidation(){this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}}class t{constructor(e,t,s,i,r){let{name:n,link:a,_id:o,isLiked:l}=e;this.name=n,this.link=a,this._id=o,this.isLiked=l,this._cardTemplate=t,this._handleImageClick=s,this._handleDeleteClick=i,this._handleAddLike=r}_setEventListeners(){this._likeBtn.addEventListener("click",(()=>{this._handleAddLike(this)})),this._cardElement.querySelector("#trash-button").addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick({name:this.name,link:this.link})}))}setIsLiked(e){this.isLiked=e,this._renderLikes()}_renderLikes(){this.isLiked?this._likeBtn.classList.add("card__like-button_active"):this._likeBtn.classList.remove("card__like-button_active")}handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=document.querySelector(this._cardTemplate).content.querySelector(".card").cloneNode(!0),this._likeBtn=this._cardElement.querySelector(".card__like-button"),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__description-text"),this._cardTitleEl.textContent=this.name,this._cardImageEl.src=this.link,this._cardImageEl.alt=this.name+"Photo",this._setEventListeners(),this._renderLikes(),this._cardElement}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){document.removeEventListener("keydown",this._handleEscClose),this._popupElement.classList.remove("modal_opened")}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.querySelector(".modal__close-button").addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()}))}}class i extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitBtn=this._popupElement.querySelector(".modal__save-button"),this._handleFormSubmit=t}close(){this._popupForm.reset(),super.close()}_getInputValues(){const e=this._popupForm.querySelectorAll(".modal__form-input"),t={};return e.forEach((e=>t[e.name]=e.value)),t}setLoading(e){this._submitBtn.textContent=e?"Saving ...":"Save"}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}const r={formSelector:".modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button_disabled",inputErrorClass:"modal__error",errorClass:"modal__form-input_type_error"},n=document.querySelector("#profile-title-input"),a=document.querySelector("#profile-subtitle-input"),o=document.forms["modal-form"],l=document.querySelector("#image-edit-form"),d=document.querySelector("#profile-avatar-image"),c=document.querySelector("#image-edit-form"),h=document.querySelector("#profile-pencil"),u=document.querySelector("#add-card-modal").querySelector("#add-card-form"),_=document.querySelector(".cards__list"),m=document.querySelector("#preview-modal").querySelector(".modal__image"),p=document.querySelector("#profile-edit-button"),v=document.querySelector("#add-card-button"),E=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponce(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then((e=>this._checkResponce(e)))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then((e=>this._checkResponce(e)))}updateUserInfo(e){let{name:t,description:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then((e=>this._checkResponce(e)))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>this._checkResponce(e)))}addCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then((e=>this._checkResponce(e)))}setLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>this._checkResponce(e)))}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>this._checkResponce(e)))}changeAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>this._checkResponce(e)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"250daeea-0b63-48f9-a4b3-e529116433c4","Content-Type":"application/json"}});function k(e){return e.isLiked?E.removeLike(e._id).then((t=>{e.setIsLiked(t.isLiked)})).catch((e=>{alert(`${e} Failed to add/remove like.`)})):E.setLike(e._id).then((t=>{e.setIsLiked(t.isLiked)})).catch((e=>{alert(`${e} Failed to add/remove like.`)}))}function f(e){I.open(),I.setSubmitAction((()=>{E.deleteCard(e._id).then((t=>{e.handleDeleteCard(t),I.close()})).catch((e=>{alert(`${e} Failed to delete post.`)}))}))}function L(e){C.open(e)}E.getInitialCards().then((e=>{U.setItems(e),U.renderItems()})).catch((e=>{alert(`${e} Failed to get cards.`)})),E.getUserInfo().then((e=>{g.setUserInfo({name:e.name,description:e.about}),g.setUserAvatar(e.avatar)})).catch((e=>{alert(`${e} Failed to get user info.`)})),d.addEventListener("click",(()=>{q.open()})),h.addEventListener("click",(()=>{q.open()})),v.addEventListener("click",(()=>{b.resetValidation(),y.open()})),p.addEventListener("click",(()=>{const{name:e,description:t}=g.getUserInfo();n.value=e,a.value=t,S.open()})),m.addEventListener("click",(()=>{C.open()})),new e(r,l).enableValidation();const b=new e(r,u);b.enableValidation(),new e(r,o).enableValidation();const S=new i("#profile-edit-modal",(function(e){S.setLoading(!0),E.updateUserInfo(e).then((t=>{g.setUserInfo(e),S.close()})).catch((e=>{alert(`${e} Failed to change user info.`)})).finally((()=>{S.setLoading(!1)}))}));S.setEventListeners();const g=new class{constructor(e){let{title:t,subtitle:s,avatar:i}=e;this._title=document.querySelector(t),this._subtitle=document.querySelector(s),this._avatar=document.querySelector(i)}getUserInfo(){return{name:this._title.textContent,description:this._subtitle.textContent}}setUserInfo(e){let{name:t,description:s}=e;this._title.textContent=t,this._subtitle.textContent=s}setUserAvatar(e){this._avatar.src=e}}({title:".profile__title",subtitle:".profile__subtitle",avatar:".profile__image"}),y=new i("#add-card-modal",(function(e){let{title:t,subtitle:s}=e;y.setLoading(!0),E.addCard({name:t,link:s}).then((e=>{U.addItem({name:t,link:s}),y.close()})).catch((e=>{alert(`${e} Failed to add card.`)})).finally((()=>{y.setLoading(!1)}))}));y.setEventListeners();const C=new class extends s{constructor(e){super({popupSelector:e}),this._modalImage=document.querySelector(".modal__image"),this._previewCaption=document.querySelector(".modal__caption")}open(e){let{name:t,link:s}=e;this._modalImage.src=s,this._modalImage.alt=t,this._previewCaption.textContent=t,super.open()}}("#preview-modal");C.setEventListeners();const I=new class extends s{constructor(e){super({popupSelector:e}),this._form=this._popupElement.querySelector(".modal__form")}setSubmitAction(e){this._handleSubmit=e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()}))}}("#delete-popup");I.setEventListeners();const q=new i("#profile-image-modal",(function(e){q.setLoading(!0),E.changeAvatar(e.link).then((e=>{g.setUserAvatar(e.avatar),q.setLoading(!1)})).catch((e=>{alert(`${e} Failed to change avatar.`)}))}));q.setEventListeners(),new e(r,c).enableValidation();const U=new class{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=t}setItems(e){this._items=e}renderItems(){this._items.forEach((e=>{this.addItem(e)}))}addItem(e){const t=this._renderer(e);this._container.prepend(t)}}({items:[],renderer:function(e){return new t(e,"#card-template",L,f,k).getView()}},_)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cm91bmR0aGV1cy1tYWluLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLW1haW4vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMtbWFpbi8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMtbWFpbi8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy1tYWluLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMtbWFpbi8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLW1haW4vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLW1haW4vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLW1haW4vLi9zcmMvY29tcG9uZW50cy9Qb3B1cENvbmZpcm0uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy1tYWluLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihjb25maWcsIGZvcm0pIHtcclxuICAgIHRoaXMuX2Zvcm0gPSBmb3JtO1xyXG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IGNvbmZpZy5pbnB1dFNlbGVjdG9yO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBjb25maWcuc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gY29uZmlnLmluYWN0aXZlQnV0dG9uQ2xhc3M7XHJcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBjb25maWcuaW5wdXRFcnJvckNsYXNzO1xyXG4gICAgdGhpcy5fZXJyb3JDbGFzcyA9IGNvbmZpZy5lcnJvckNsYXNzO1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5faW5wdXRFbGVtZW50cyA9IFsuLi50aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvcildO1xyXG4gICAgdGhpcy5zdWJtaXRCdG4gPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5faW5wdXRFbGVtZW50cy5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoZSkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VFbCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihcclxuICAgICAgYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXHJcbiAgICApO1xyXG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvck1lc3NhZ2VFbC50ZXh0Q29udGVudCA9IGlucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZTtcclxuICB9XHJcblxyXG4gIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGVycm9yTWVzc2FnZUVsID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgIyR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcclxuICAgICk7XHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvck1lc3NhZ2VFbC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgfVxyXG5cclxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xyXG4gICAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfaXNGb3JtVmFsaWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5faW5wdXRFbGVtZW50cy5ldmVyeSgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIHJldHVybiBpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF90b2dnbGVCdXR0b25TdGF0ZSgpIHtcclxuICAgIGlmICghdGhpcy5faXNGb3JtVmFsaWQoKSkge1xyXG4gICAgICB0aGlzLnN1Ym1pdEJ0bi5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICB0aGlzLnN1Ym1pdEJ0bi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN1Ym1pdEJ0bi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICB0aGlzLnN1Ym1pdEJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIC8vIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xyXG4gICAgLy8gICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAvLyB9KTtcclxuXHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxuXHJcbiAgcmVzZXRWYWxpZGF0aW9uKCkge1xyXG4gICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuXHJcbiAgICB0aGlzLl9pbnB1dEVsZW1lbnRzLmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgeyBuYW1lLCBsaW5rLCBfaWQsIGlzTGlrZWQgfSxcclxuICAgIGNhcmRUZW1wbGF0ZSxcclxuICAgIGhhbmRsZUltYWdlQ2xpY2ssXHJcbiAgICBoYW5kbGVEZWxldGVDbGljayxcclxuICAgIGhhbmRsZUFkZExpa2VcclxuICApIHtcclxuICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICB0aGlzLmxpbmsgPSBsaW5rO1xyXG4gICAgdGhpcy5faWQgPSBfaWQ7XHJcbiAgICB0aGlzLmlzTGlrZWQgPSBpc0xpa2VkO1xyXG4gICAgdGhpcy5fY2FyZFRlbXBsYXRlID0gY2FyZFRlbXBsYXRlO1xyXG4gICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayA9IGhhbmRsZUltYWdlQ2xpY2s7XHJcbiAgICB0aGlzLl9oYW5kbGVEZWxldGVDbGljayA9IGhhbmRsZURlbGV0ZUNsaWNrO1xyXG4gICAgdGhpcy5faGFuZGxlQWRkTGlrZSA9IGhhbmRsZUFkZExpa2U7XHJcbiAgfVxyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9saWtlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUFkZExpa2UodGhpcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudFxyXG4gICAgICAucXVlcnlTZWxlY3RvcihcIiN0cmFzaC1idXR0b25cIilcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2sodGhpcyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2NhcmRJbWFnZUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUltYWdlQ2xpY2soeyBuYW1lOiB0aGlzLm5hbWUsIGxpbms6IHRoaXMubGluayB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2V0SXNMaWtlZChpc0xpa2VkKSB7XHJcbiAgICB0aGlzLmlzTGlrZWQgPSBpc0xpa2VkO1xyXG4gICAgdGhpcy5fcmVuZGVyTGlrZXMoKTtcclxuICB9XHJcblxyXG4gIF9yZW5kZXJMaWtlcygpIHtcclxuICAgIGlmICh0aGlzLmlzTGlrZWQpIHtcclxuICAgICAgdGhpcy5fbGlrZUJ0bi5jbGFzc0xpc3QuYWRkKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fbGlrZUJ0bi5jbGFzc0xpc3QucmVtb3ZlKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlRGVsZXRlQ2FyZCgpIHtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0VmlldygpIHtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gZG9jdW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fY2FyZFRlbXBsYXRlKVxyXG4gICAgICAuY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRcIilcclxuICAgICAgLmNsb25lTm9kZSh0cnVlKTtcclxuXHJcbiAgICB0aGlzLl9saWtlQnRuID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWJ1dHRvblwiKTtcclxuICAgIHRoaXMuX2NhcmRJbWFnZUVsID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX2NhcmRUaXRsZUVsID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIuY2FyZF9fZGVzY3JpcHRpb24tdGV4dFwiXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuX2NhcmRUaXRsZUVsLnRleHRDb250ZW50ID0gdGhpcy5uYW1lO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlRWwuc3JjID0gdGhpcy5saW5rO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlRWwuYWx0ID0gdGhpcy5uYW1lICsgXCJQaG90b1wiO1xyXG5cclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9yZW5kZXJMaWtlcygpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9jYXJkRWxlbWVudDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHsgcG9wdXBTZWxlY3RvciB9KSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xyXG4gIH1cclxuICBvcGVuKCkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtb2RhbF9vcGVuZWRcIik7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUVzY0Nsb3NlID0gKGUpID0+IHtcclxuICAgIGlmIChlLmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Nsb3NlLWJ1dHRvblwiKVxyXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsX29wZW5lZFwiKSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZUZvcm1TdWJtaXQpIHtcclxuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xyXG4gICAgdGhpcy5fc3VibWl0QnRuID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX3NhdmUtYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHRoaXMuX3BvcHVwRm9ybS5yZXNldCgpO1xyXG4gICAgc3VwZXIuY2xvc2UoKTtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgIGNvbnN0IGlucHV0cyA9IHRoaXMuX3BvcHVwRm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLm1vZGFsX19mb3JtLWlucHV0XCIpO1xyXG4gICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB7fTtcclxuICAgIGlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4gKGlucHV0VmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWUpKTtcclxuICAgIHJldHVybiBpbnB1dFZhbHVlcztcclxuICB9XHJcblxyXG4gIC8vIE1heWJlIHRoaXMgd29ya3M/Pz9cclxuICBzZXRMb2FkaW5nKGxvYWRpbmcpIHtcclxuICAgIGlmIChsb2FkaW5nKSB7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ0bi50ZXh0Q29udGVudCA9IFwiU2F2aW5nIC4uLlwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fc3VibWl0QnRuLnRleHRDb250ZW50ID0gXCJTYXZlXCI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgdGhpcy5fcG9wdXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBpLmpzXCI7XHJcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCBVc2VySW5mbyBmcm9tIFwiLi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xyXG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgUG9wdXBDb25maXJtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwQ29uZmlybS5qc1wiO1xyXG5pbXBvcnQgXCIuLi9wYWdlcy9pbmRleC5jc3NcIjtcclxuXHJcbi8vIFZBUklBQkxFU1xyXG5cclxuY29uc3QgY29uZmlnID0ge1xyXG4gIGZvcm1TZWxlY3RvcjogXCIubW9kYWxfX2Zvcm1cIixcclxuICBpbnB1dFNlbGVjdG9yOiBcIi5tb2RhbF9fZm9ybS1pbnB1dFwiLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fc2F2ZS1idXR0b25cIixcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19zYXZlLWJ1dHRvbl9kaXNhYmxlZFwiLFxyXG4gIGlucHV0RXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcIm1vZGFsX19mb3JtLWlucHV0X3R5cGVfZXJyb3JcIixcclxufTtcclxuXHJcbi8vIFByb2ZpbGUgVmFyaWFibGVzXHJcblxyXG5jb25zdCBwcm9maWxlVGl0bGVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS10aXRsZS1pbnB1dFwiKTtcclxuY29uc3QgcHJvZmlsZVN1YnRpdGxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtc3VidGl0bGUtaW5wdXRcIik7XHJcbmNvbnN0IHByb2ZpbGVGb3JtID0gZG9jdW1lbnQuZm9ybXNbXCJtb2RhbC1mb3JtXCJdO1xyXG5jb25zdCBlZGl0SW1hZ2VGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNpbWFnZS1lZGl0LWZvcm1cIik7XHJcbmNvbnN0IGF2YXRhckltYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlLWF2YXRhci1pbWFnZVwiKTtcclxuY29uc3QgcHJvZmlsZUVkaXRJbWFnZUZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2ltYWdlLWVkaXQtZm9ybVwiKTtcclxuY29uc3QgcGVuY2lsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlLXBlbmNpbFwiKTtcclxuXHJcbi8vIENhcmQgVmFyaWFibGVzXHJcblxyXG5jb25zdCBhZGRDYXJkTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FkZC1jYXJkLW1vZGFsXCIpO1xyXG5jb25zdCBhZGRDYXJkRm9ybSA9IGFkZENhcmRNb2RhbC5xdWVyeVNlbGVjdG9yKFwiI2FkZC1jYXJkLWZvcm1cIik7XHJcbmNvbnN0IGNhcmRzV3JhcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2xpc3RcIik7XHJcblxyXG4vLyBQcmV2aWV3IEltYWdlIFZhcmlhYmxlc1xyXG5cclxuY29uc3QgcHJldmlld01vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcmV2aWV3LW1vZGFsXCIpO1xyXG5jb25zdCBtb2RhbEltYWdlID0gcHJldmlld01vZGFsLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2ltYWdlXCIpO1xyXG5cclxuLy8gQnV0dG9uc1xyXG5cclxuY29uc3QgcHJvZmlsZUVkaXRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtZWRpdC1idXR0b25cIik7XHJcbmNvbnN0IGFkZE5ld0NhcmRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FkZC1jYXJkLWJ1dHRvblwiKTtcclxuXHJcbi8vIEFQSSdTXHJcblxyXG5jb25zdCBhcGkgPSBuZXcgQXBpKHtcclxuICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxXCIsXHJcbiAgaGVhZGVyczoge1xyXG4gICAgYXV0aG9yaXphdGlvbjogXCIyNTBkYWVlYS0wYjYzLTQ4ZjktYTRiMy1lNTI5MTE2NDMzYzRcIixcclxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuYXBpXHJcbiAgLmdldEluaXRpYWxDYXJkcygpXHJcbiAgLnRoZW4oKGNhcmRzKSA9PiB7XHJcbiAgICBuZXdDYXJkU2VjdGlvbi5zZXRJdGVtcyhjYXJkcyk7XHJcbiAgICBuZXdDYXJkU2VjdGlvbi5yZW5kZXJJdGVtcygpO1xyXG4gIH0pXHJcbiAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgIGFsZXJ0KGAke2Vycn0gRmFpbGVkIHRvIGdldCBjYXJkcy5gKTtcclxuICB9KTtcclxuXHJcbmFwaVxyXG4gIC5nZXRVc2VySW5mbygpXHJcbiAgLnRoZW4oKGluZm8pID0+IHtcclxuICAgIHByb2ZpbGVVc2VySW5mby5zZXRVc2VySW5mbyh7XHJcbiAgICAgIG5hbWU6IGluZm8ubmFtZSxcclxuICAgICAgZGVzY3JpcHRpb246IGluZm8uYWJvdXQsXHJcbiAgICB9KTtcclxuICAgIHByb2ZpbGVVc2VySW5mby5zZXRVc2VyQXZhdGFyKGluZm8uYXZhdGFyKTtcclxuICB9KVxyXG4gIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICBhbGVydChgJHtlcnJ9IEZhaWxlZCB0byBnZXQgdXNlciBpbmZvLmApO1xyXG4gIH0pO1xyXG5cclxuLy8gQVBJIEZVTkNUSU9OU1xyXG5cclxuZnVuY3Rpb24gaGFuZGxlUHJvZmlsZUVkaXRTdWJtaXQoZGF0YSkge1xyXG4gIHByb2ZpbGVFZGl0Rm9ybS5zZXRMb2FkaW5nKHRydWUpO1xyXG4gIGFwaVxyXG4gICAgLnVwZGF0ZVVzZXJJbmZvKGRhdGEpXHJcbiAgICAudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgIHByb2ZpbGVVc2VySW5mby5zZXRVc2VySW5mbyhkYXRhKTtcclxuICAgICAgcHJvZmlsZUVkaXRGb3JtLmNsb3NlKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgYWxlcnQoYCR7ZXJyfSBGYWlsZWQgdG8gY2hhbmdlIHVzZXIgaW5mby5gKTtcclxuICAgIH0pXHJcbiAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgIHByb2ZpbGVFZGl0Rm9ybS5zZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVDYXJkU3VibWl0KHsgdGl0bGU6IG5hbWUsIHN1YnRpdGxlOiBsaW5rIH0pIHtcclxuICBhZGRJbWFnZUZvcm0uc2V0TG9hZGluZyh0cnVlKTtcclxuICBhcGlcclxuICAgIC5hZGRDYXJkKHsgbmFtZSwgbGluayB9KVxyXG4gICAgLnRoZW4oKGNhcmQpID0+IHtcclxuICAgICAgbmV3Q2FyZFNlY3Rpb24uYWRkSXRlbSh7IG5hbWUsIGxpbmsgfSk7XHJcbiAgICAgIGFkZEltYWdlRm9ybS5jbG9zZSgpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgIGFsZXJ0KGAke2Vycn0gRmFpbGVkIHRvIGFkZCBjYXJkLmApO1xyXG4gICAgfSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgYWRkSW1hZ2VGb3JtLnNldExvYWRpbmcoZmFsc2UpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUF2YXRhclN1Ym1pdChpbnB1dCkge1xyXG4gIGF2YXRhckVkaXRGb3JtLnNldExvYWRpbmcodHJ1ZSk7XHJcbiAgYXBpXHJcbiAgICAuY2hhbmdlQXZhdGFyKGlucHV0LmxpbmspXHJcbiAgICAudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgIHByb2ZpbGVVc2VySW5mby5zZXRVc2VyQXZhdGFyKHJlc3VsdC5hdmF0YXIpO1xyXG4gICAgICBhdmF0YXJFZGl0Rm9ybS5zZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBhbGVydChgJHtlcnJ9IEZhaWxlZCB0byBjaGFuZ2UgYXZhdGFyLmApO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUFkZExpa2UoY2FyZCkge1xyXG4gIGlmIChjYXJkLmlzTGlrZWQpIHtcclxuICAgIHJldHVybiBhcGlcclxuICAgICAgLnJlbW92ZUxpa2UoY2FyZC5faWQpXHJcbiAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICBjYXJkLnNldElzTGlrZWQocmVzLmlzTGlrZWQpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIGFsZXJ0KGAke2Vycn0gRmFpbGVkIHRvIGFkZC9yZW1vdmUgbGlrZS5gKTtcclxuICAgICAgfSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBhcGlcclxuICAgICAgLnNldExpa2UoY2FyZC5faWQpXHJcbiAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICBjYXJkLnNldElzTGlrZWQocmVzLmlzTGlrZWQpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIGFsZXJ0KGAke2Vycn0gRmFpbGVkIHRvIGFkZC9yZW1vdmUgbGlrZS5gKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVEZWxldGVDbGljayhjYXJkKSB7XHJcbiAgY29uZmlybURlbGV0ZVBvcHVwLm9wZW4oKTtcclxuICBjb25maXJtRGVsZXRlUG9wdXAuc2V0U3VibWl0QWN0aW9uKCgpID0+IHtcclxuICAgIGFwaVxyXG4gICAgICAuZGVsZXRlQ2FyZChjYXJkLl9pZClcclxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIGNhcmQuaGFuZGxlRGVsZXRlQ2FyZChyZXN1bHQpO1xyXG4gICAgICAgIGNvbmZpcm1EZWxldGVQb3B1cC5jbG9zZSgpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgIGFsZXJ0KGAke2Vycn0gRmFpbGVkIHRvIGRlbGV0ZSBwb3N0LmApO1xyXG4gICAgICB9KTtcclxuICB9KTtcclxufVxyXG4vLyBGVU5DVElPTlNcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUltYWdlQ2xpY2soY2FyZCkge1xyXG4gIHByZXZpZXdJbWFnZVBvcHVwLm9wZW4oY2FyZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUNhcmQoY2FyZERhdGEpIHtcclxuICBjb25zdCBjYXJkID0gbmV3IENhcmQoXHJcbiAgICBjYXJkRGF0YSxcclxuICAgIFwiI2NhcmQtdGVtcGxhdGVcIixcclxuICAgIGhhbmRsZUltYWdlQ2xpY2ssXHJcbiAgICBoYW5kbGVEZWxldGVDbGljayxcclxuICAgIGhhbmRsZUFkZExpa2VcclxuICApO1xyXG4gIHJldHVybiBjYXJkLmdldFZpZXcoKTtcclxufVxyXG5cclxuLy8gRVZFTlQgTElTVEVORVJTXHJcblxyXG5hdmF0YXJJbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGF2YXRhckVkaXRGb3JtLm9wZW4oKTtcclxufSk7XHJcblxyXG5wZW5jaWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBhdmF0YXJFZGl0Rm9ybS5vcGVuKCk7XHJcbn0pO1xyXG5cclxuYWRkTmV3Q2FyZEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGFkZENhcmRGb3JtVmFsaWRhdG9yLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gIGFkZEltYWdlRm9ybS5vcGVuKCk7XHJcbn0pO1xyXG5cclxucHJvZmlsZUVkaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBjb25zdCB7IG5hbWUsIGRlc2NyaXB0aW9uIH0gPSBwcm9maWxlVXNlckluZm8uZ2V0VXNlckluZm8oKTtcclxuICBwcm9maWxlVGl0bGVJbnB1dC52YWx1ZSA9IG5hbWU7XHJcbiAgcHJvZmlsZVN1YnRpdGxlSW5wdXQudmFsdWUgPSBkZXNjcmlwdGlvbjtcclxuICBwcm9maWxlRWRpdEZvcm0ub3BlbigpO1xyXG59KTtcclxuXHJcbm1vZGFsSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBwcmV2aWV3SW1hZ2VQb3B1cC5vcGVuKCk7XHJcbn0pO1xyXG5cclxuLy9DTEFTU0VTXHJcblxyXG5jb25zdCBwcm9maWxlRWRpdEltYWdlID0gbmV3IEZvcm1WYWxpZGF0b3IoY29uZmlnLCBlZGl0SW1hZ2VGb3JtKTtcclxucHJvZmlsZUVkaXRJbWFnZS5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG5jb25zdCBhZGRDYXJkRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGNvbmZpZywgYWRkQ2FyZEZvcm0pO1xyXG5hZGRDYXJkRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG5jb25zdCBlZGl0UHJvZmlsZUZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihjb25maWcsIHByb2ZpbGVGb3JtKTtcclxuZWRpdFByb2ZpbGVGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuXHJcbmNvbnN0IHByb2ZpbGVFZGl0Rm9ybSA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gIFwiI3Byb2ZpbGUtZWRpdC1tb2RhbFwiLFxyXG4gIGhhbmRsZVByb2ZpbGVFZGl0U3VibWl0XHJcbik7XHJcbnByb2ZpbGVFZGl0Rm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgcHJvZmlsZVVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtcclxuICB0aXRsZTogXCIucHJvZmlsZV9fdGl0bGVcIixcclxuICBzdWJ0aXRsZTogXCIucHJvZmlsZV9fc3VidGl0bGVcIixcclxuICBhdmF0YXI6IFwiLnByb2ZpbGVfX2ltYWdlXCIsXHJcbn0pO1xyXG5cclxuY29uc3QgYWRkSW1hZ2VGb3JtID0gbmV3IFBvcHVwV2l0aEZvcm0oXCIjYWRkLWNhcmQtbW9kYWxcIiwgaGFuZGxlQ2FyZFN1Ym1pdCk7XHJcbmFkZEltYWdlRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgcHJldmlld0ltYWdlUG9wdXAgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoXCIjcHJldmlldy1tb2RhbFwiKTtcclxucHJldmlld0ltYWdlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmNvbnN0IGNvbmZpcm1EZWxldGVQb3B1cCA9IG5ldyBQb3B1cENvbmZpcm0oXCIjZGVsZXRlLXBvcHVwXCIpO1xyXG5jb25maXJtRGVsZXRlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmNvbnN0IGF2YXRhckVkaXRGb3JtID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIjcHJvZmlsZS1pbWFnZS1tb2RhbFwiLFxyXG4gIGhhbmRsZUF2YXRhclN1Ym1pdFxyXG4pO1xyXG5hdmF0YXJFZGl0Rm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgYXZhdGFyRWRpdEZvcm1WYWxpZGF0aW9uID0gbmV3IEZvcm1WYWxpZGF0b3IoXHJcbiAgY29uZmlnLFxyXG4gIHByb2ZpbGVFZGl0SW1hZ2VGb3JtXHJcbik7XHJcbmF2YXRhckVkaXRGb3JtVmFsaWRhdGlvbi5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG5jb25zdCBuZXdDYXJkU2VjdGlvbiA9IG5ldyBTZWN0aW9uKFxyXG4gIHtcclxuICAgIGl0ZW1zOiBbXSxcclxuICAgIHJlbmRlcmVyOiBjcmVhdGVDYXJkLFxyXG4gIH0sXHJcbiAgY2FyZHNXcmFwXHJcbik7XHJcblxyXG4vKiBUby1EbyBMaXN0OlxyXG4tIEZJWCBDT1JSRUNUSU9OUyAmIFNVQk1JVCAqL1xyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xyXG4gIGNvbnN0cnVjdG9yKHsgYmFzZVVybCwgaGVhZGVycyB9KSB7XHJcbiAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcclxuICAgIHRoaXMuX2hlYWRlcnMgPSBoZWFkZXJzO1xyXG4gIH1cclxuXHJcbiAgX2NoZWNrUmVzcG9uY2UocmVzKSB7XHJcbiAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzfWApO1xyXG4gIH1cclxuXHJcbiAgZ2V0SW5pdGlhbENhcmRzKCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHRoaXMuX2NoZWNrUmVzcG9uY2UocmVzKSk7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB0aGlzLl9jaGVja1Jlc3BvbmNlKHJlcykpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVXNlckluZm8oeyBuYW1lLCBkZXNjcmlwdGlvbiB9KSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICBhYm91dDogZGVzY3JpcHRpb24sXHJcbiAgICAgIH0pLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB0aGlzLl9jaGVja1Jlc3BvbmNlKHJlcykpO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlQ2FyZChpZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7aWR9YCwge1xyXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHRoaXMuX2NoZWNrUmVzcG9uY2UocmVzKSk7XHJcbiAgfVxyXG5cclxuICBhZGRDYXJkKHsgbmFtZSwgbGluayB9KSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgIGxpbms6IGxpbmssXHJcbiAgICAgIH0pLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB0aGlzLl9jaGVja1Jlc3BvbmNlKHJlcykpO1xyXG4gIH1cclxuXHJcbiAgc2V0TGlrZShpZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7aWR9L2xpa2VzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHRoaXMuX2NoZWNrUmVzcG9uY2UocmVzKSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVMaWtlKGlkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtpZH0vbGlrZXNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4gdGhpcy5fY2hlY2tSZXNwb25jZShyZXMpKTtcclxuICB9XHJcblxyXG4gIGNoYW5nZUF2YXRhcih1cmwpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgYXZhdGFyOiB1cmwsXHJcbiAgICAgIH0pLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB0aGlzLl9jaGVja1Jlc3BvbmNlKHJlcykpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3IoeyB0aXRsZSwgc3VidGl0bGUsIGF2YXRhciB9KSB7XHJcbiAgICB0aGlzLl90aXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGl0bGUpO1xyXG4gICAgdGhpcy5fc3VidGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHN1YnRpdGxlKTtcclxuICAgIHRoaXMuX2F2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYXZhdGFyKTtcclxuICB9XHJcblxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmFtZTogdGhpcy5fdGl0bGUudGV4dENvbnRlbnQsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLl9zdWJ0aXRsZS50ZXh0Q29udGVudCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzZXRVc2VySW5mbyh7IG5hbWUsIGRlc2NyaXB0aW9uIH0pIHtcclxuICAgIHRoaXMuX3RpdGxlLnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgIHRoaXMuX3N1YnRpdGxlLnRleHRDb250ZW50ID0gZGVzY3JpcHRpb247XHJcbiAgfVxyXG5cclxuICBzZXRVc2VyQXZhdGFyKGF2YXRhcikge1xyXG4gICAgdGhpcy5fYXZhdGFyLnNyYyA9IGF2YXRhcjtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3BXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xyXG4gICAgdGhpcy5fbW9kYWxJbWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2ltYWdlXCIpO1xyXG4gICAgdGhpcy5fcHJldmlld0NhcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19jYXB0aW9uXCIpO1xyXG4gIH1cclxuXHJcbiAgb3Blbih7IG5hbWUsIGxpbmsgfSkge1xyXG4gICAgdGhpcy5fbW9kYWxJbWFnZS5zcmMgPSBsaW5rO1xyXG4gICAgdGhpcy5fbW9kYWxJbWFnZS5hbHQgPSBuYW1lO1xyXG4gICAgdGhpcy5fcHJldmlld0NhcHRpb24udGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgc3VwZXIub3BlbigpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwQ29uZmlybSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7XHJcbiAgICB0aGlzLl9mb3JtID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2Zvcm1cIik7XHJcbiAgfVxyXG5cclxuICBzZXRTdWJtaXRBY3Rpb24oaGFuZGxlcikge1xyXG4gICAgdGhpcy5faGFuZGxlU3VibWl0ID0gaGFuZGxlcjtcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9oYW5kbGVTdWJtaXQoKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXJlciB9LCBjc3NTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5faXRlbXMgPSBpdGVtcztcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBjc3NTZWxlY3RvcjtcclxuICB9XHJcblxyXG4gIHNldEl0ZW1zKGl0ZW1zKSB7XHJcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySXRlbXMoKSB7XHJcbiAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKChkYXRhKSA9PiB7XHJcbiAgICAgIHRoaXMuYWRkSXRlbShkYXRhKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBhZGRJdGVtKGRhdGEpIHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9yZW5kZXJlcihkYXRhKTtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGVsZW1lbnQpO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsiRm9ybVZhbGlkYXRvciIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwiZm9ybSIsInRoaXMiLCJfZm9ybSIsIl9pbnB1dFNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9zZXRFdmVudExpc3RlbmVycyIsIl9pbnB1dEVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsInN1Ym1pdEJ0biIsInF1ZXJ5U2VsZWN0b3IiLCJmb3JFYWNoIiwiaW5wdXRFbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwiX3Nob3dJbnB1dEVycm9yIiwiZXJyb3JNZXNzYWdlRWwiLCJpZCIsImNsYXNzTGlzdCIsImFkZCIsInRleHRDb250ZW50IiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfaGlkZUlucHV0RXJyb3IiLCJyZW1vdmUiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2lzRm9ybVZhbGlkIiwiZXZlcnkiLCJkaXNhYmxlZCIsImVuYWJsZVZhbGlkYXRpb24iLCJyZXNldFZhbGlkYXRpb24iLCJDYXJkIiwiX3JlZiIsImNhcmRUZW1wbGF0ZSIsImhhbmRsZUltYWdlQ2xpY2siLCJoYW5kbGVEZWxldGVDbGljayIsImhhbmRsZUFkZExpa2UiLCJuYW1lIiwibGluayIsIl9pZCIsImlzTGlrZWQiLCJfY2FyZFRlbXBsYXRlIiwiX2hhbmRsZUltYWdlQ2xpY2siLCJfaGFuZGxlRGVsZXRlQ2xpY2siLCJfaGFuZGxlQWRkTGlrZSIsIl9saWtlQnRuIiwiX2NhcmRFbGVtZW50IiwiX2NhcmRJbWFnZUVsIiwic2V0SXNMaWtlZCIsIl9yZW5kZXJMaWtlcyIsImhhbmRsZURlbGV0ZUNhcmQiLCJnZXRWaWV3IiwiZG9jdW1lbnQiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiX2NhcmRUaXRsZUVsIiwic3JjIiwiYWx0IiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiX3BvcHVwRWxlbWVudCIsIm9wZW4iLCJfaGFuZGxlRXNjQ2xvc2UiLCJjbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJrZXkiLCJzZXRFdmVudExpc3RlbmVycyIsInRhcmdldCIsImNvbnRhaW5zIiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZUZvcm1TdWJtaXQiLCJzdXBlciIsIl9wb3B1cEZvcm0iLCJfc3VibWl0QnRuIiwiX2hhbmRsZUZvcm1TdWJtaXQiLCJyZXNldCIsIl9nZXRJbnB1dFZhbHVlcyIsImlucHV0cyIsImlucHV0VmFsdWVzIiwiaW5wdXQiLCJ2YWx1ZSIsInNldExvYWRpbmciLCJsb2FkaW5nIiwicHJldmVudERlZmF1bHQiLCJmb3JtU2VsZWN0b3IiLCJwcm9maWxlVGl0bGVJbnB1dCIsInByb2ZpbGVTdWJ0aXRsZUlucHV0IiwicHJvZmlsZUZvcm0iLCJmb3JtcyIsImVkaXRJbWFnZUZvcm0iLCJhdmF0YXJJbWFnZSIsInByb2ZpbGVFZGl0SW1hZ2VGb3JtIiwicGVuY2lsIiwiYWRkQ2FyZEZvcm0iLCJjYXJkc1dyYXAiLCJtb2RhbEltYWdlIiwicHJvZmlsZUVkaXRCdG4iLCJhZGROZXdDYXJkQnRuIiwiYXBpIiwiYmFzZVVybCIsImhlYWRlcnMiLCJfYmFzZVVybCIsIl9oZWFkZXJzIiwiX2NoZWNrUmVzcG9uY2UiLCJyZXMiLCJvayIsImpzb24iLCJQcm9taXNlIiwicmVqZWN0Iiwic3RhdHVzIiwiZ2V0SW5pdGlhbENhcmRzIiwiZmV0Y2giLCJtZXRob2QiLCJ0aGVuIiwiZ2V0VXNlckluZm8iLCJ1cGRhdGVVc2VySW5mbyIsIl9yZWYyIiwiZGVzY3JpcHRpb24iLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImFib3V0IiwiZGVsZXRlQ2FyZCIsImFkZENhcmQiLCJfcmVmMyIsInNldExpa2UiLCJyZW1vdmVMaWtlIiwiY2hhbmdlQXZhdGFyIiwidXJsIiwiYXZhdGFyIiwiYXV0aG9yaXphdGlvbiIsImNhcmQiLCJjYXRjaCIsImVyciIsImFsZXJ0IiwiY29uZmlybURlbGV0ZVBvcHVwIiwic2V0U3VibWl0QWN0aW9uIiwicmVzdWx0IiwicHJldmlld0ltYWdlUG9wdXAiLCJjYXJkcyIsIm5ld0NhcmRTZWN0aW9uIiwic2V0SXRlbXMiLCJyZW5kZXJJdGVtcyIsImluZm8iLCJwcm9maWxlVXNlckluZm8iLCJzZXRVc2VySW5mbyIsInNldFVzZXJBdmF0YXIiLCJhdmF0YXJFZGl0Rm9ybSIsImFkZENhcmRGb3JtVmFsaWRhdG9yIiwiYWRkSW1hZ2VGb3JtIiwicHJvZmlsZUVkaXRGb3JtIiwiZGF0YSIsImZpbmFsbHkiLCJ0aXRsZSIsInN1YnRpdGxlIiwiX3RpdGxlIiwiX3N1YnRpdGxlIiwiX2F2YXRhciIsImFkZEl0ZW0iLCJfbW9kYWxJbWFnZSIsIl9wcmV2aWV3Q2FwdGlvbiIsImhhbmRsZXIiLCJfaGFuZGxlU3VibWl0IiwiY3NzU2VsZWN0b3IiLCJpdGVtcyIsInJlbmRlcmVyIiwiX2l0ZW1zIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsImVsZW1lbnQiLCJwcmVwZW5kIiwiY2FyZERhdGEiXSwic291cmNlUm9vdCI6IiJ9